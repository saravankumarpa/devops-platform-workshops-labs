#!/usr/bin/env groovy

//ENV Vars
def TOOLS_NAMESPACE = "s4g19x-saravankumarpa-openshift201-may2019-tools"
def DEV_NAMESPACE = "s4g19x-saravankumarpa-openshift201-may2019-dev"
def PROD_NAMESPACE = "s4g19x-saravankumarpa-openshift201-may2019-prod"
def LOKI_SERVICE  = "loki"

//Pipeline
node {
            stage ('Deploy Loki to Dev'){
                dir ('simple_pipeline') {
                    checkout scm
                    sh "oc process -f openshift201/templates/loki_template.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} | oc apply -f - -n ${DEV_NAMESPACE}"
                    sh "echo Wait for service to be up"
                    timeout (time: 180, unit: 'SECONDS'){
                        openshift.withCluster() {
                        openshift.withProject("${DEV_NAMESPACE}") {
                            def dc = openshift.selector('deployment', "${LOKI_SERVICE}")
                            // this will wait until the desired replicas are available
                            dc.rollout().status()
                        }
                        }
                    }

             }
        }
            
             stage('Deploy Loki to Prod') {
    timeout(time: 1, unit: 'HOURS') {
      input 'Deploy to Prod?'
    }
    dir ('simple_pipeline') {
     sh "oc process -f openshift201/templates/loki_template.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} | oc apply -f - -n ${PROD_NAMESPACE}"

      sh "echo Wait for service to be up"
      timeout (time: 180, unit: 'SECONDS'){
        openshift.withCluster() {
          openshift.withProject("${PROD_NAMESPACE}") {
            def dc = openshift.selector('deployment', "${LOKI_SERVICE}")
            // this will wait until the desired replicas are available
            dc.rollout().status()
          }
        }
      }
    }
  }
    }
